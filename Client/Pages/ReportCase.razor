@page "/Report"
@using System.Net
@using CovidAlertTool.Shared
@inject HttpClient HttpClient
@inject IGeolocationService GeolocationService
<h2>Report A Case</h2>
<br/>
<style>
    button {
         padding: 15px 25px;
         border: unset;
         border-radius: 15px;
         color: #212121;
         z-index: 1;
         background: #e8e8e8;
         position: relative;
         font-weight: 1000;
         font-size: 17px;
         -webkit-box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
         box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
         transition: all 250ms;
         overflow: hidden;
        }
        
        button::before {
         content: "";
         position: absolute;
         top: 0;
         left: 0;
         height: 100%;
         width: 0;
         border-radius: 15px;
         background-color: #212121;
         z-index: -1;
         -webkit-box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
         box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
         transition: all 250ms
        }
        
        button:hover {
         color: #e8e8e8;
        }
        
        button:hover::before {
         width: 100%;
        }
        input[type=text] {
              width: 15%;
              padding: 12px 20px;
              margin: 8px 0;
              box-sizing: border-box;
              border: 3px solid #ccc;
              -webkit-transition: 0.5s;
              transition: 0.5s;
              outline: none;
            }
            .second[type=text] {
                  width: 30%;
                  padding: 12px 20px;
                  margin: 8px 0;
                  box-sizing: border-box;
                  border: 3px solid #ccc;
                  -webkit-transition: 0.5s;
                  transition: 0.5s;
                  outline: none;
            }
            
            input[type=text]:focus {
              border: 5px solid #000000;
            }
</style>
<br/>
<button @onclick="ReportAtGpsPos">@_reportGpsText</button>
<br/><br/>

<h2>Latitude - Degrees Minutes Seconds</h2>
<br/>
<input type="text"@bind="_latD"/>
<input type="text"@bind="_latM"/>
<input type="text" class="second"@bind="_latS"/>
<br/><br/>
<h2>Longitude - Degrees Minutes Seconds</h2>
<br/>
<input type="text"@bind="_lonD"/>
<input type="text"@bind="_lonM"/>
<input type="text" class="second"@bind="_lonS"/>
<br/><br/>
<button @onclick="ReportAtLatLon">@_reportLatLonText</button>

@code {
    
    private String _latD, _latM, _latS;
    private String _lonD, _lonM, _lonS;
    private String _reportGpsText = "Report a case at my current GPS position", _reportLatLonText = "Report a case at the inputted latitude/longitude coordinates";

    GeolocationPosition _position = new GeolocationPosition { Coords = new GeolocationCoordinates { Latitude = 0d, Longitude = 0d } };

    protected override void OnInitialized()
    {
        GeolocationService.GetCurrentPosition(this, nameof(OnPositionReceived));
    }

    private async void ReportAtGpsPos()
    {
        var location = new Location
        {
            Latitude = _position.Coords.Latitude,
            Longitude = _position.Coords.Longitude,
            Name = DateTime.UtcNow
        };
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("LocationApi/ReportCase", location);
        while (response.StatusCode == HttpStatusCode.InternalServerError) response = await HttpClient.PostAsJsonAsync("LocationApi/ReportCase", location);
        _reportGpsText = "Reported!";
        StateHasChanged();
        await Task.Delay(3000);
        _reportGpsText = "Report a case at my current GPS position";
        StateHasChanged();
    }

    private async void ReportAtLatLon()
    {
        var location = new Location();
        if (D(_latD) < 0d) location.Latitude = D(_latD) - D(_latM) / 60 - D(_latS) / 3600;
        else location.Latitude = D(_latD) + D(_latM) / 60 + D(_latS) / 3600;
        if (D(_lonD) < 0d) location.Longitude = D(_lonD) - D(_lonM) / 60 - D(_lonS) / 3600;
        else location.Longitude = D(_lonD) + D(_lonM) / 60 + D(_lonS) / 3600;
        location.Name = DateTime.UtcNow;
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("LocationApi/ReportCase", location);
        while (response.StatusCode == HttpStatusCode.InternalServerError) response = await HttpClient.PostAsJsonAsync("LocationApi/ReportCase", location);
        _reportLatLonText = "Reported!";
        StateHasChanged();
        await Task.Delay(3000);
        _reportLatLonText = "Report a case at the inputted latitude/longitude coordinates";
        StateHasChanged();
    }
    
    private static Double D(String str) // Convert to double for code cleanliness (typing Double.Parse every time will get messy)
    {
        return Double.Parse(str);
    }

    [JSInvokable]
    public void OnPositionReceived(GeolocationPosition position)
    {
        _position = position;
    }

    [JSInvokable]
    public void OnPositionError(GeolocationPositionError positionError)
    {
        _position = new GeolocationPosition { Coords = new GeolocationCoordinates { Latitude = 0d, Longitude = 0d } };
    }

}