@page "/Map"
@using Syncfusion.Blazor.Maps
@using CovidAlertTool.Shared
@using System.Net
@inject HttpClient HttpClient

@if (_waypoints.Count is not 0)
{
    <SfMaps Width="100%" Height="700">
        <MapsZoomSettings Enable="true" MaxZoom="19" ZoomFactor="2">
            <MapsZoomToolbarSettings>
                <MapsZoomToolbarButton ToolbarItems="new List<ToolbarItem> { ToolbarItem.Zoom, ToolbarItem.ZoomIn, ToolbarItem.ZoomOut, ToolbarItem.Pan, ToolbarItem.Reset }"></MapsZoomToolbarButton>
            </MapsZoomToolbarSettings>
        </MapsZoomSettings>
        <MapsLayers>
            <MapsLayer UrlTemplate="https://tile.openstreetmap.org/level/tileX/tileY.png" TValue="String">
                <MapsMarkerSettings>
                    <MapsMarker Visible="true" DataSource="_reports" Shape="MarkerType.Triangle" Height="15" Fill=" #f57600" Width="15" TValue="Location">
                        <MapsMarkerTooltipSettings ValuePath="Name" Visible="true"></MapsMarkerTooltipSettings>
                    </MapsMarker>
                    <MapsMarker Visible="true" DataSource="_waypoints" Shape="MarkerType.Diamond" Height="15" Fill="#000000" Width="15" TValue="Location">
                        <MapsMarkerTooltipSettings ValuePath="Name" Visible="true"></MapsMarkerTooltipSettings>
                    </MapsMarker>
                    <MapsMarkerClusterSettings AllowClustering="true" Shape="MarkerType.Circle" Height="30" Fill="#0066cc" Width="30">
                        <MapsLayerMarkerClusterLabelStyle Color="#ffffff"></MapsLayerMarkerClusterLabelStyle>
                    </MapsMarkerClusterSettings>
                </MapsMarkerSettings>
                <MapsNavigationLines>
                    @for (var i = 0; i < _waypoints.Count - 1; ++i)
                    {
                        <MapsNavigationLine Visible="true" Width="13" Color="#0066cc" Angle="0"
                                            Latitude="new[] { _waypoints.ElementAt(i).Latitude, _waypoints.ElementAt(i + 1).Latitude }"
                                            Longitude="new[] { _waypoints.ElementAt(i).Longitude, _waypoints.ElementAt(i + 1).Longitude }">
                        </MapsNavigationLine>
                    }
                </MapsNavigationLines>
            </MapsLayer>
        </MapsLayers>
    </SfMaps>
}

<input @bind="_input[0]"/>
<input @bind="_input[1]"/>
<input @bind="_input[2]"/>
<input @bind="_input[3]"/>
<input @bind="_input[4]"/>
<input @bind="_input[5]"/>
<input @bind="_input[6]"/>
<input @bind="_input[7]"/>
<input @bind="_input[8]"/>
<input @bind="_input[9]"/>
<input @bind="_input[10]"/>
<input @bind="_input[11]"/>

<button @onclick="LoadJourney">Load my journey</button>

@code{

    private List<Location> _waypoints = new();
    private List<Location> _reports = new();
    private List<RegionalCovidData> _statistics = new();
    private String[] _input = new String[12];

    private async void LoadJourney()
    {
        _input = new[] { "apps", "educators", "behavioral", "grams", "degrees", "swim", "annually", "adoption", "smart", "friend", "min", "bidding" };
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("LocationApi/Get", _input);
        while (response.StatusCode == HttpStatusCode.InternalServerError) response = await HttpClient.PostAsJsonAsync("LocationApi/Get", _input);
        _waypoints = await response.Content.ReadFromJsonAsync<List<Location>>() ?? new List<Location>();
        response = await HttpClient.GetAsync("LocationApi/GetReports");
        _reports = await response.Content.ReadFromJsonAsync<List<Location>>() ?? new List<Location>();
        StateHasChanged();
    }

}