@page "/Journey"
@using CovidAlertTool.Shared
@using Blazored.LocalStorage
@using System.Net
@inject ILocalStorageService LocalStorageService
@inject HttpClient HttpClient
@inject IGeolocationService GeolocationService

<PageTitle>ACAS - Route</PageTitle>

<h2>My Route/Journey</h2>
<style>
    button {
     padding: 15px 25px;
     border: unset;
     border-radius: 15px;
     color: #212121;
     z-index: 1;
     background: #e8e8e8;
     position: relative;
     font-weight: 1000;
     font-size: 17px;
     -webkit-box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
     box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
     transition: all 250ms;
     overflow: hidden;
    }
    
    button::before {
     content: "";
     position: absolute;
     top: 0;
     left: 0;
     height: 100%;
     width: 0;
     border-radius: 15px;
     background-color: #212121;
     z-index: -1;
     -webkit-box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
     box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
     transition: all 250ms
    }
    
    button:hover {
     color: #e8e8e8;
    }
    
    button:hover::before {
     width: 100%;
    }
    input[type=text] {
      width: 15%;
      padding: 12px 20px;
      margin: 8px 0;
      box-sizing: border-box;
      border: 3px solid #ccc;
      -webkit-transition: 0.5s;
      transition: 0.5s;
      outline: none;
    }
    .second[type=text] {
          width: 30%;
          padding: 12px 20px;
          margin: 8px 0;
          box-sizing: border-box;
          border: 3px solid #ccc;
          -webkit-transition: 0.5s;
          transition: 0.5s;
          outline: none;
    }
    
    input[type=text]:focus {
      border: 5px solid #000000;
    }
</style>
<br/>
<button @onclick="SendGpsLoc">@_sendGpsLocText</button>
<br/><br/><br/>

<h2>Latitude - Degrees Minutes Seconds</h2>
<br/>
<input type="text"@bind="_latD"/>
<input type="text"@bind="_latM"/>
<input type="text"class="second"@bind="_latS"/>
<br/><br/>
<h2>Longitude - Degrees Minutes Seconds</h2>
<br/>
<input type="text"@bind="_lonD"/>
<input type="text"@bind="_lonM"/>
<input type ="text"class="second"@bind="_lonS"/>
<br/><br/>
<button @onclick="SendLoc">@_sendLatLonText</button>

@if (!_hideKeyInput)
{
    <div class="grid-container">
        <div class="grid-item">1 <span><input @bind="_input[0]"/></span></div>
        <div class="grid-item">2 <span><input @bind="_input[1]"/></span></div>
        <div class="grid-item">3 <span><input @bind="_input[2]"/></span></div>
        <div class="grid-item">4 <span><input @bind="_input[3]"/></span></div>
        <div class="grid-item">5 <span><input @bind="_input[4]"/></span></div>
        <div class="grid-item">6 <span><input @bind="_input[5]"/></span></div>
        <div class="grid-item">7 <span><input @bind="_input[6]"/></span></div>
        <div class="grid-item">8 <span><input @bind="_input[7]"/></span></div>
        <div class="grid-item">9 <span><input @bind="_input[8]"/></span></div>
        <div class="grid-item">10 <span><input @bind="_input[9]"/></span></div>
        <div class="grid-item">11 <span><input @bind="_input[10]"/></span></div>
        <div class="grid-item">12 <span><input @bind="_input[11]"/></span></div>
    </div>
}


@code {

    private String[] _input = new String[12];
    private Boolean _hideKeyInput = true;
    private String _latD, _latM, _latS;
    private String _lonD, _lonM, _lonS;
    private String _sendGpsLocText = "Plot GPS Position";
    private String _sendLatLonText = "Plot Inputted Coordinates";

    GeolocationPosition _position = new GeolocationPosition { Coords = new GeolocationCoordinates { Latitude = 0d, Longitude = 0d } };

    protected override void OnInitialized()
    {
        GeolocationService.GetCurrentPosition(this, nameof(OnPositionReceived));
    }

    private async void SendGpsLoc()
    {
        if (String.IsNullOrEmpty(await LocalStorageService.GetItemAsStringAsync("key")) && _hideKeyInput) // If user is not logged in, prompt login
        {
            _hideKeyInput = false;
            StateHasChanged();
            return;
        }

        var location = new NewLocation();
        location.Key = _hideKeyInput ? (await LocalStorageService.GetItemAsStringAsync("key")).Split(",") : _input;
        location.Latitude = _position.Coords.Latitude;
        location.Longitude = _position.Coords.Longitude;
        location.Name = DateTime.UtcNow;

        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("LocationApi/New", location);
        while (response.StatusCode == HttpStatusCode.InternalServerError) response = await HttpClient.PostAsJsonAsync("LocationApi/New", location);

    // If login is successful and key is not stored
        if (!response.IsSuccessStatusCode) return;
        if (String.IsNullOrEmpty(await LocalStorageService.GetItemAsStringAsync("key")))
            await LocalStorageService.SetItemAsStringAsync("key", String.Join(",", _input));

        _sendGpsLocText = "Sent!";
        StateHasChanged();
        await Task.Delay(3000);
        _sendGpsLocText = "Plot GPS Position";
        StateHasChanged();
    }

    private async void SendLoc()
    {
        if (String.IsNullOrEmpty(await LocalStorageService.GetItemAsStringAsync("key")) && _hideKeyInput) // If user is not logged in, prompt login
        {
            _hideKeyInput = false;
            StateHasChanged();
            return;
        }

        var location = new NewLocation();
        location.Key = _hideKeyInput ? (await LocalStorageService.GetItemAsStringAsync("key")).Split(",") : _input;
        if (D(_latD) < 0d) location.Latitude = D(_latD) - D(_latM) / 60 - D(_latS) / 3600;
        else location.Latitude = D(_latD) + D(_latM) / 60 + D(_latS) / 3600;
        if (D(_lonD) < 0d) location.Longitude = D(_lonD) - D(_lonM) / 60 - D(_lonS) / 3600;
        else location.Longitude = D(_lonD) + D(_lonM) / 60 + D(_lonS) / 3600;
        location.Name = DateTime.UtcNow;
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("LocationApi/New", location);
        while (response.StatusCode == HttpStatusCode.InternalServerError) response = await HttpClient.PostAsJsonAsync("LocationApi/New", location);

    // If login is successful and key is not stored
        if (!response.IsSuccessStatusCode) return;
        if (String.IsNullOrEmpty(await LocalStorageService.GetItemAsStringAsync("key")))
            await LocalStorageService.SetItemAsStringAsync("key", String.Join(",", _input));
        
        _sendLatLonText = "Sent!";
        StateHasChanged();
        await Task.Delay(3000);
        _sendLatLonText = "Plot Inputted Coordinates";
        StateHasChanged();
    }

    private static Double D(String str) // Convert to double for code cleanliness (typing Double.Parse every time will get messy)
    {
        return Double.Parse(str);
    }

    [JSInvokable]
    public void OnPositionReceived(GeolocationPosition position)
    {
        _position = position;
    }

    [JSInvokable]
    public void OnPositionError(GeolocationPositionError positionError)
    {
        _position = new GeolocationPosition { Coords = new GeolocationCoordinates { Latitude = 0d, Longitude = 0d } };
    }

}