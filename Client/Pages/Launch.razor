@page "/Launch"
@using System.Net
@using Blazored.LocalStorage
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorageService

<PageTitle>ACAS - Launch</PageTitle>

<style>
button {
     padding: 15px 25px;
     border: unset;
     border-radius: 15px;
     color: #212121;
     z-index: 1;
     background: #e8e8e8;
     position: relative;
     font-weight: 1000;
     font-size: 17px;
     -webkit-box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
     box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
     transition: all 250ms;
     overflow: hidden;
    }
    
    button::before {
     content: "";
     position: absolute;
     top: 0;
     left: 0;
     height: 100%;
     width: 0;
     border-radius: 15px;
     background-color: #212121;
     z-index: -1;
     -webkit-box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
     box-shadow: 4px 8px 19px -3px rgba(0,0,0,0.27);
     transition: all 250ms
    }
    
    button:hover {
     color: #e8e8e8;
    }
    
    button:hover::before {
     width: 100%;
    }
    .grid-container {
        display: grid;
        grid-template-columns: auto auto auto;
        padding: 10px;
    }
    
    .grid-item {
        padding: 20px;
        text-align: center;
    }
	
	.center {
		margin: auto;
		text-align: center;
		width: 60%;
		padding: 10px;
	}
</style>

<div class="center">
	<h4>Get started</h4>
	<br/>
	<h6>1. Creating a new account</h6>
	<p>Getting started is very easy - the first step is to create a new account. Press the button below and a 12-word passphrase will
		be generated for you - this will be the key you login with. It's a secure but easily memorizable way to authenticate you!</p>
	<h6>2. Plotting your first route</h6>
	<p>Now that you've created your new account, let's go ahead and plot your first route. Head over to the "My Route" page. Notice
		how there are two options: Plot GPS Position and Plot Inputted Coordinates. Plot GPS Position is useful if you're on-the-go:
		you can simply press the button every few minutes to record your journey. Plot Inputted Coordinates is useful if you're only
		planning out a route: Simply input the latitude and longitude of your first waypoint, press the button, input the coordinates
		for your next waypoint, and repeat until you're done!</p>
	<h6>3. Viewing your route and nearby threats</h6>
	<p>Let's head over to the "Map" page. Click the "Load my journey" button and a map will appear. You will notice a few symbols:
		The black diamonds and blue lines are your route, the orange triangles are user-reported COVID cases, and the purple
		squares are regional COVID stats obtained from public health agencies. Hovering over the icons will reveal the time the waypoint
		was added to your route, the time the user reported the COVID case, and the details about the public health report for
		that region, respectively.</p>
	<h6>4. You're good to go!</h6>
	<br/>
	<button @onclick="NewAccount">@_newAccountText</button>
</div>
<br/>

@if (_key is not null)
{
	<p>Your key (12 words) are:</p>
	<p>@_key[0], @_key[1], @_key[2], @_key[3], @_key[4], @_key[5], @_key[6], @_key[7], @_key[8], @_key[9], @_key[10], @_key[11]</p>
}

@code {

	private String[]? _key;
	private String _newAccountText = "New Account";

	private async void NewAccount()
	{
		_newAccountText = "Generating...";
		HttpResponseMessage response = await HttpClient.PostAsJsonAsync("UserApi/New", "");
		while (response.StatusCode == HttpStatusCode.InternalServerError) response = await HttpClient.PostAsJsonAsync("UserApi/New", "");
		_key = (await response.Content.ReadFromJsonAsync<String[]>())!;
		await LocalStorageService.SetItemAsStringAsync("key", String.Join(",", _key));
		_newAccountText = "Generated!";
		StateHasChanged();
		await Task.Delay(5000);
		_newAccountText = "New Account";
		StateHasChanged();
	}

}